import os
from typing import List, Optional
from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware  # Added CORS middleware
from pydantic import BaseModel
from dotenv import load_dotenv
import google.generativeai as genai
import time
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()

# Check for API key
GOOGLE_API_KEY = os.getenv("GEMINI_API_KEY")
if not GOOGLE_API_KEY:
    raise ValueError("GEMINI_API_KEY not found in environment variables. Please check your .env file.")

# Initialize Gemini client and configuration
MODEL = "gemini-1.5-flash"  # Make sure the model version is correct
genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel(MODEL)

app = FastAPI(title="Intelligent Email Writer API")

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Allows all origins (in production, specify exact origins)
    allow_credentials=True,
    allow_methods=["*"],  # Allows all methods
    allow_headers=["*"],  # Allows all headers
)

# Request schema
class EmailRequest(BaseModel):
    category: str
    recipient: str
    subject: str
    tone: str
    language: str
    urgency_level: Optional[str] = "Biasa"
    points: List[str]
    example_email: Optional[str] = None

# Function to build prompt text from user input
def build_prompt(body: EmailRequest) -> str:
    lines = [
        f"Tolong buatkan email dalam {body.language.lower()} yang {body.tone.lower()}",
        f"kepada {body.recipient}.",
        f"Subjek: {body.subject}.",
        f"Kategori email: {body.category}.",
        f"Tingkat urgensi: {body.urgency_level}.",
        "",
        "Isi email harus mencakup poin-poin berikut:",
    ]
    for point in body.points:
        lines.append(f"- {point}")
    if body.example_email:
        lines += ["", "Contoh email sebelumnya:", body.example_email]
    lines.append("")
    lines.append("Buat email yang profesional, jelas, dan padat.")
    return "\n".join(lines)

# Endpoint for generating emails
@app.post("/generate/")
async def generate_email(req: EmailRequest):
    prompt = build_prompt(req)
    logger.info(f"Processing request for email to: {req.recipient}")

    try:
        # Send prompt to Gemini API
        logger.info("Sending request to Gemini API")
        response = model.generate_content(prompt)
        
        # Get text result from response
        generated = response.text.strip()
        
        # Validate results
        if not generated:
            logger.error("Empty response received from Gemini API")
            raise HTTPException(status_code=500, detail="No results generated by Gemini API")
        
        logger.info("Email successfully generated")
        return {"generated_email": generated}
    
    except Exception as e:
        logger.exception("Error occurred while processing request")
        raise HTTPException(status_code=500, detail=str(e))

# Health check endpoint
@app.get("/health")
async def health_check():
    return {"status": "ok"}

# For running directly with Python
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)